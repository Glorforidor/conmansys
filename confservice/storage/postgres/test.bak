func TestGetItem(t *testing.T) {
	// TODO: could be a problem if no items are in the database, then this test
	// passes even if eveything is not testet.
	items, err := p.GetItems()
	if err != nil {
		t.Fatalf("Test failed: %v", err)
	}

	for _, item := range items {
		i, err := p.GetItem(item.ID)
		if err != nil {
			t.Fatalf("test failed: %v", err)
		}

		if *i != *item {
			t.Fatalf("test failed: expected: %v, got: %v", item, i)
		}
	}
}

func TestGetItemFail(t *testing.T) {
	_, err := p.GetItem(0)
	if err == nil {
		t.Errorf("Test failed, expected an error")
	}
}

// TestCreationAndDeletionItem test for data can be inserted into the database
// and if the inserted element can be deleted again.
func TestCreationAndDeletionItem(t *testing.T) {
	tt := map[string]struct {
		value        string
		iType        string
		version      string
		want         int64
		rowsAffected int64
	}{
		"create and delete": {
			value:        "posty_config",
			iType:        "config",
			version:      "0.0.1",
			want:         1,
			rowsAffected: 1,
		},
	}

	for name, tc := range tt {
		// test for creation of item
		got, err := p.CreateItem(tc.value, tc.iType, tc.version)
		if err != nil {
			t.Fatalf("%v: failed with an error: %v", name, err)
		}

		if got < tc.want {
			t.Fatalf("%v: expected: %v, got: %v", name, tc.want, got)
		}

		// test for deletion of item
		got, err = p.DeleteItem(got)
		if err != nil {
			t.Fatalf("%v: failed with an error: %v", name, err)
		}

		if got != tc.rowsAffected {
			t.Fatalf("%v: expected: %v, got: %v", name, tc.rowsAffected, got)
		}
	}
}

func TestGetModule(t *testing.T) {
	mods, err := p.GetModules()
	if err != nil {
		t.Fatalf("test failed: %v", err)
	}

	for _, mod := range mods {
		got, err := p.GetModule(mod.ID)
		if err != nil {
			t.Fatalf("test failed: %v", err)
		}

		if *got != *mod {
			t.Fatalf("test failed: expected: %v, got: %v", mod, got)
		}
	}
}

func TestCreationAndDeletionModule(t *testing.T) {
	tt := map[string]struct {
		value        string
		version      string
		want         int64
		rowsAffected int64
	}{
		"create and delete": {value: "posty_mod", version: "0.0.1", want: 1, rowsAffected: 1},
	}

	for name, tc := range tt {
		got, err := p.CreateModule(tc.value, tc.version)
		if err != nil {
			t.Fatalf("%v: failed with an error: %v", name, err)
		}

		if got < tc.want {
			t.Fatalf("%v: expected: %v, got: %v", name, tc.want, got)
		}

		got, err = p.DeleteModule(got)
		if err != nil {
			t.Fatalf("%v: failed with an error: %v", name, err)
		}

		if got != tc.rowsAffected {
			t.Fatalf("%v: expected: %v, got: %v", name, tc.rowsAffected, got)
		}
	}
}

func TestGetItemModule(t *testing.T) {
	ims, err := p.GetItemModules()
	if err != nil {
		t.Fatalf("test failed: %v", err)
	}

	for _, im := range ims {
		got, err := p.GetItemModule(im.ID)
		if err != nil {
			t.Fatalf("test failed: %v", err)
		}

		if *got != *im {
			t.Fatalf("test failed: expected: %v, got: %v", im, got)
		}
	}
}

func TestCreationAndDeletionItemModule(t *testing.T) {
	tt := map[string]struct {
		iValue       string
		iType        string
		iVersion     string
		mValue       string
		mVersion     string
		want         int64
		rowsAffected int64
	}{
		"create and delete": {
			iValue:       "posty",
			iType:        "database",
			iVersion:     "0.0.1",
			mValue:       "posty_mod",
			mVersion:     "0.0.1",
			want:         1,
			rowsAffected: 1,
		},
	}

	for name, tc := range tt {
		iID, err := p.CreateItem(tc.iValue, tc.iType, tc.iVersion)
		if err != nil {
			t.Fatalf("%v: failed with an error: %v", name, err)
		}
		if iID < tc.want {
			t.Fatalf("%v: expected: %v, got: %v", name, tc.want, iID)
		}

		mID, err := p.CreateModule(tc.mValue, tc.mVersion)
		if err != nil {
			t.Fatalf("%v: failed with an error: %v", name, err)
		}
		if mID < tc.want {
			t.Fatalf("%v: expected: %v, got: %v", name, tc.want, mID)
		}

		imID, err := p.CreateItemModule(iID, mID)
		if err != nil {
			t.Fatalf("%v: failed with an error: %v", name, err)
		}
		if imID < tc.want {
			t.Fatalf("%v: expected: %v, got: %v", name, tc.want, imID)
		}

		row, err := p.DeleteItemModule(imID)
		if err != nil {
			t.Fatalf("%v: failed with an error: %v", name, err)
		}
		if row != tc.rowsAffected {
			t.Fatalf("%v: expected: %v, got: %v", name, tc.want, imID)
		}

		row, err = p.DeleteItem(iID)
		if err != nil {
			t.Fatalf("%v: failed with an error: %v", name, err)
		}
		if row != tc.rowsAffected {
			t.Fatalf("%v: expected: %v, got: %v", name, tc.want, iID)
		}

		row, err = p.DeleteModule(mID)
		if err != nil {
			t.Fatalf("%v: failed with an error: %v", name, err)
		}
		if row != tc.rowsAffected {
			t.Fatalf("%v: expected: %v, got: %v", name, tc.want, mID)
		}
	}
